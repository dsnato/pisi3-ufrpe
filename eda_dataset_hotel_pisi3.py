# -*- coding: utf-8 -*-
"""eda_dataset-hotel-pisi3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14o8s_WEzn0C3NMS9I9foUGGTCG4kdnze
"""

# Instala√ß√£o de bibliotecas (execute apenas se necess√°rio)
!pip install pandas-profiling sweetviz missingno plotly

# Importa√ß√£o de todas as bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import missingno as msno
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o de estilo
plt.style.use('ggplot')
sns.set_palette("husl")
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)

print("‚úÖ Bibliotecas importadas com sucesso!")

# Carregar o dataset
df = pd.read_csv('hotel_bookings.csv')

# Primeira visualiza√ß√£o
print("üìä DIMENS√ïES DO DATASET:")
print(f"Linhas: {df.shape[0]}")
print(f"Colunas: {df.shape[1]}")

print("\nüëÄ PRIMEIRAS LINHAS:")
display(df.head())

print("\nüìã INFORMA√á√ïES GERAIS:")
df.info()

print("üîç AN√ÅLISE DE VALORES FALTANTES:")

# An√°lise percentual de valores nulos
missing_data = df.isnull().sum().sort_values(ascending=False)
missing_percent = (df.isnull().sum() / df.shape[0] * 100).sort_values(ascending=False)
missing_df = pd.DataFrame({
    'Valores Faltantes': missing_data,
    'Percentual (%)': missing_percent
})
display(missing_df[missing_df['Valores Faltantes'] > 0])

# Visualiza√ß√£o matricial de valores faltantes
plt.figure(figsize=(12, 6))
msno.matrix(df)
plt.title('Matriz de Valores Faltantes', fontsize=16, fontweight='bold')
plt.show()

# Heatmap de correla√ß√£o de missing values
plt.figure(figsize=(10, 6))
msno.heatmap(df)
plt.title('Correla√ß√£o entre Valores Faltantes', fontsize=16, fontweight='bold')
plt.show()

print("üìà ESTAT√çSTICAS DESCRITIVAS - COLUNAS NUM√âRICAS:")
display(df.describe().T)

print("\nüìä ESTAT√çSTICAS DESCRITIVAS - COLUNAS CATEG√ìRICAS:")
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    print(f"\n{col}:")
    print(df[col].value_counts().head())

print("üéØ AN√ÅLISE DA VARI√ÅVEL TARGET - is_canceled")

# Distribui√ß√£o de cancelamentos
plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
cancel_counts = df['is_canceled'].value_counts()
plt.pie(cancel_counts.values, labels=['N√£o Cancelado', 'Cancelado'],
        autopct='%1.1f%%', colors=['#2ecc71', '#e74c3c'], startangle=90)
plt.title('Distribui√ß√£o de Cancelamentos', fontweight='bold')

plt.subplot(1, 2, 2)
cancel_by_hotel = df.groupby('hotel')['is_canceled'].mean() * 100
cancel_by_hotel.plot(kind='bar', color=['#3498db', '#9b59b6'])
plt.title('Taxa de Cancelamento por Tipo de Hotel')
plt.ylabel('Taxa de Cancelamento (%)')
plt.xticks(rotation=0)

plt.tight_layout()
plt.show()

print(f"üìä Taxa Geral de Cancelamento: {df['is_canceled'].mean()*100:.2f}%")
print(f"üè® Taxa Cancelamento City Hotel: {cancel_by_hotel['City Hotel']:.2f}%")
print(f"üèñÔ∏è Taxa Cancelamento Resort Hotel: {cancel_by_hotel['Resort Hotel']:.2f}%")

print("üìÖ AN√ÅLISE TEMPORAL DAS RESERVAS")

# Criar coluna de data completa
df['arrival_date'] = pd.to_datetime(
    df['arrival_date_year'].astype(str) + '-' +
    df['arrival_date_month'] + '-' +
    df['arrival_date_day_of_month'].astype(str),
    errors='coerce'
)

# An√°lise por m√™s
monthly_bookings = df.groupby(['arrival_date_year', 'arrival_date_month']).size().unstack(0)
month_order = ['January', 'February', 'March', 'April', 'May', 'June',
               'July', 'August', 'September', 'October', 'November', 'December']
monthly_bookings = monthly_bookings.reindex(month_order)

plt.figure(figsize=(15, 8))
monthly_bookings.plot(kind='bar', figsize=(15, 6))
plt.title('Reservas por M√™s e Ano', fontweight='bold', fontsize=14)
plt.xlabel('M√™s')
plt.ylabel('N√∫mero de Reservas')
plt.xticks(rotation=45)
plt.legend(title='Ano')
plt.tight_layout()
plt.show()

# Taxa de cancelamento mensal
monthly_cancel = df.groupby('arrival_date_month')['is_canceled'].mean() * 100
monthly_cancel = monthly_cancel.reindex(month_order)

plt.figure(figsize=(12, 6))
monthly_cancel.plot(kind='line', marker='o', color='red')
plt.title('Taxa de Cancelamento por M√™s', fontweight='bold', fontsize=14)
plt.xlabel('M√™s')
plt.ylabel('Taxa de Cancelamento (%)')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

print("üåé AN√ÅLISE GEOGR√ÅFICA - DISTRIBUI√á√ÉO POR PA√çSES")

# Top 10 pa√≠ses com mais reservas
country_counts = df['country'].value_counts().head(10)

plt.figure(figsize=(12, 6))
country_counts.plot(kind='bar', color='teal')
plt.title('Top 10 Pa√≠ses por N√∫mero de Reservas', fontweight='bold', fontsize=14)
plt.xlabel('Pa√≠s')
plt.ylabel('N√∫mero de Reservas')
plt.xticks(rotation=45)
plt.show()

# Taxa de cancelamento por pa√≠s (apenas pa√≠ses com +100 reservas)
country_stats = df.groupby('country').agg({
    'is_canceled': ['count', 'mean']
}).round(3)
country_stats.columns = ['total_reservas', 'taxa_cancelamento']
country_stats = country_stats[country_stats['total_reservas'] > 100]
top_cancel_countries = country_stats.sort_values('taxa_cancelamento', ascending=False).head(10)

plt.figure(figsize=(12, 6))
top_cancel_countries['taxa_cancelamento'].plot(kind='bar', color='orange')
plt.title('Top 10 Pa√≠ses com Maior Taxa de Cancelamento (>100 reservas)', fontweight='bold', fontsize=14)
plt.xlabel('Pa√≠s')
plt.ylabel('Taxa de Cancelamento')
plt.xticks(rotation=45)
plt.show()

print("üí∞ AN√ÅLISE DE PRE√áOS E TARIFAS")

plt.figure(figsize=(15, 10))

# Distribui√ß√£o do ADR (Average Daily Rate)
plt.subplot(2, 2, 1)
sns.histplot(df['adr'], bins=50, kde=True, color='purple')
plt.title('Distribui√ß√£o do ADR (Average Daily Rate)')
plt.xlabel('ADR')
plt.ylabel('Frequ√™ncia')

# ADR por tipo de hotel
plt.subplot(2, 2, 2)
sns.boxplot(x='hotel', y='adr', data=df)
plt.title('ADR por Tipo de Hotel')
plt.ylabel('ADR')
plt.xlabel('Tipo de Hotel')

# ADR vs Cancelamento
plt.subplot(2, 2, 3)
sns.boxplot(x='is_canceled', y='adr', data=df)
plt.title('ADR vs Cancelamento')
plt.ylabel('ADR')
plt.xlabel('Cancelado (0=N√£o, 1=Sim)')

# Pre√ßo m√©dio por m√™s
plt.subplot(2, 2, 4)
monthly_adr = df.groupby('arrival_date_month')['adr'].mean()
monthly_adr = monthly_adr.reindex(month_order)
monthly_adr.plot(kind='bar', color='green')
plt.title('Pre√ßo M√©dio (ADR) por M√™s')
plt.xlabel('M√™s')
plt.ylabel('ADR M√©dio')
plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

# Remover outliers extremos para melhor visualiza√ß√£o
df_clean = df[df['adr'] < 1000]

print(f"üìä Estat√≠sticas do ADR (limpo):")
print(f"M√©dia: ${df_clean['adr'].mean():.2f}")
print(f"Mediana: ${df_clean['adr'].median():.2f}")
print(f"M√°ximo: ${df_clean['adr'].max():.2f}")
print(f"M√≠nimo: ${df_clean['adr'].min():.2f}")

print("‚è∞ AN√ÅLISE DE LEAD TIME (ANTECED√äNCIA DA RESERVA)")

plt.figure(figsize=(15, 5))

# Distribui√ß√£o do lead time
plt.subplot(1, 2, 1)
sns.histplot(df['lead_time'], bins=50, kde=True, color='blue')
plt.title('Distribui√ß√£o do Lead Time')
plt.xlabel('Lead Time (dias)')
plt.ylabel('Frequ√™ncia')

# Lead time vs Cancelamento
plt.subplot(1, 2, 2)
sns.boxplot(x='is_canceled', y='lead_time', data=df)
plt.title('Lead Time vs Cancelamento')
plt.xlabel('Cancelado (0=N√£o, 1=Sim)')
plt.ylabel('Lead Time (dias)')

plt.tight_layout()
plt.show()

# An√°lise mais detalhada
print("üìä Estat√≠sticas de Lead Time:")
print(f"Lead Time M√©dio: {df['lead_time'].mean():.1f} dias")
print(f"Lead Time M√©dio para cancelamentos: {df[df['is_canceled']==1]['lead_time'].mean():.1f} dias")
print(f"Lead Time M√©dio para n√£o cancelamentos: {df[df['is_canceled']==0]['lead_time'].mean():.1f} dias")

# Correla√ß√£o entre lead time e cancelamento
correlation = df['lead_time'].corr(df['is_canceled'])
print(f"üìà Correla√ß√£o entre Lead Time e Cancelamento: {correlation:.3f}")

print("üè¢ AN√ÅLISE DE SEGMENTO DE MERCADO E CANAL DE DISTRIBUI√á√ÉO")

plt.figure(figsize=(15, 10))

# Distribui√ß√£o por segmento de mercado
plt.subplot(2, 2, 1)
market_segment_counts = df['market_segment'].value_counts()
market_segment_counts.plot(kind='bar', color='skyblue')
plt.title('Distribui√ß√£o por Segmento de Mercado')
plt.xlabel('Segmento de Mercado')
plt.ylabel('N√∫mero de Reservas')
plt.xticks(rotation=45)

# Taxa de cancelamento por segmento
plt.subplot(2, 2, 2)
cancel_by_segment = df.groupby('market_segment')['is_canceled'].mean() * 100
cancel_by_segment.plot(kind='bar', color='salmon')
plt.title('Taxa de Cancelamento por Segmento de Mercado')
plt.xlabel('Segmento de Mercado')
plt.ylabel('Taxa de Cancelamento (%)')
plt.xticks(rotation=45)

# Distribui√ß√£o por canal de distribui√ß√£o
plt.subplot(2, 2, 3)
distribution_channel_counts = df['distribution_channel'].value_counts()
distribution_channel_counts.plot(kind='bar', color='lightgreen')
plt.title('Distribui√ß√£o por Canal de Distribui√ß√£o')
plt.xlabel('Canal de Distribui√ß√£o')
plt.ylabel('N√∫mero de Reservas')
plt.xticks(rotation=45)

# Taxa de cancelamento por canal
plt.subplot(2, 2, 4)
cancel_by_channel = df.groupby('distribution_channel')['is_canceled'].mean() * 100
cancel_by_channel.plot(kind='bar', color='orange')
plt.title('Taxa de Cancelamento por Canal de Distribui√ß√£o')
plt.xlabel('Canal de Distribui√ß√£o')
plt.ylabel('Taxa de Cancelamento (%)')
plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

print("üë• AN√ÅLISE DE TIPOS DE CLIENTE")

plt.figure(figsize=(15, 5))

# Distribui√ß√£o por tipo de cliente
plt.subplot(1, 2, 1)
customer_type_counts = df['customer_type'].value_counts()
customer_type_counts.plot(kind='bar', color='lightcoral')
plt.title('Distribui√ß√£o por Tipo de Cliente')
plt.xlabel('Tipo de Cliente')
plt.ylabel('N√∫mero de Reservas')
plt.xticks(rotation=45)

# Taxa de cancelamento por tipo de cliente
plt.subplot(1, 2, 2)
cancel_by_customer = df.groupby('customer_type')['is_canceled'].mean() * 100
cancel_by_customer.plot(kind='bar', color='mediumpurple')
plt.title('Taxa de Cancelamento por Tipo de Cliente')
plt.xlabel('Tipo de Cliente')
plt.ylabel('Taxa de Cancelamento (%)')
plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

# An√°lise detalhada por tipo de cliente
customer_analysis = df.groupby('customer_type').agg({
    'is_canceled': 'mean',
    'adr': 'mean',
    'lead_time': 'mean',
    'total_of_special_requests': 'mean'
}).round(3)

customer_analysis.columns = ['taxa_cancelamento', 'adr_medio', 'lead_time_medio', 'solicitacoes_especiais_media']
display(customer_analysis)

print("üìä MATRIZ DE CORRELA√á√ïES")

# Selecionar apenas colunas num√©ricas para correla√ß√£o
numeric_cols = df.select_dtypes(include=[np.number]).columns
correlation_matrix = df[numeric_cols].corr()

# Focar nas correla√ß√µes com a vari√°vel target
target_correlations = correlation_matrix['is_canceled'].sort_values(ascending=False)

print("üîù Principais correla√ß√µes com Cancelamento:")
display(target_correlations)

# Heatmap das correla√ß√µes
plt.figure(figsize=(16, 12))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
            annot_kws={'size': 8}, fmt='.2f')
plt.title('Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas', fontweight='bold', fontsize=16)
plt.tight_layout()
plt.show()

# Correla√ß√µes mais fortes com cancelamento
strong_correlations = target_correlations[(abs(target_correlations) > 0.1) & (target_correlations != 1.0)]
print("üéØ Vari√°veis com maior correla√ß√£o com cancelamento (|corr| > 0.1):")
display(strong_correlations)

print("üé® AN√ÅLISE MULTIVARIADA AVAN√áADA")

# 1. Lead Time vs ADR vs Cancelamento
plt.figure(figsize=(12, 8))
sns.scatterplot(x='lead_time', y='adr', hue='is_canceled',
                data=df[df['adr'] < 1000], alpha=0.6, palette='viridis')
plt.title('Lead Time vs ADR vs Cancelamento', fontweight='bold')
plt.xlabel('Lead Time (dias)')
plt.ylabel('ADR')
plt.legend(title='Cancelado')
plt.show()

# 2. Tipo de Hotel vs Lead Time vs Cancelamento
plt.figure(figsize=(12, 6))
sns.boxplot(x='hotel', y='lead_time', hue='is_canceled', data=df)
plt.title('Tipo de Hotel vs Lead Time vs Cancelamento', fontweight='bold')
plt.ylabel('Lead Time (dias)')
plt.xlabel('Tipo de Hotel')
plt.legend(title='Cancelado')
plt.show()

# 3. An√°lise de cancelamentos por pa√≠s e tipo de hotel
pivot_table = df.pivot_table(values='is_canceled',
                            index='country',
                            columns='hotel',
                            aggfunc='mean',
                            fill_value=0)

# Top 15 pa√≠ses com maior taxa de cancelamento
top_countries = df['country'].value_counts().head(15).index
pivot_table_filtered = pivot_table.loc[top_countries]

plt.figure(figsize=(14, 8))
pivot_table_filtered.plot(kind='bar', figsize=(14, 8))
plt.title('Taxa de Cancelamento por Pa√≠s e Tipo de Hotel (Top 15 pa√≠ses)', fontweight='bold')
plt.ylabel('Taxa de Cancelamento')
plt.xlabel('Pa√≠s')
plt.xticks(rotation=45)
plt.legend(title='Tipo de Hotel')
plt.tight_layout()
plt.show()

print("üéØ INSIGHTS E RECOMENDA√á√ïES FINAIS")

print("=" * 60)
print("PRINCIPAIS DESCOBERTAS:")
print("=" * 60)

# Insights calculados programaticamente
cancel_rate = df['is_canceled'].mean() * 100
lead_time_cancel = df[df['is_canceled'] == 1]['lead_time'].mean()
lead_time_no_cancel = df[df['is_canceled'] == 0]['lead_time'].mean()
adr_cancel = df[df['is_canceled'] == 1]['adr'].mean()
adr_no_cancel = df[df['is_canceled'] == 0]['adr'].mean()

print(f"1. üìâ Taxa geral de cancelamento: {cancel_rate:.1f}%")
print(f"2. ‚è∞ Reservas canceladas t√™m lead time MUITO maior: {lead_time_cancel:.1f} dias vs {lead_time_no_cancel:.1f} dias")
print(f"3. üí∞ Reservas canceladas t√™m ADR ligeiramente menor: ${adr_cancel:.2f} vs ${adr_no_cancel:.2f}")
print(f"4. üè® City Hotel tem maior taxa de cancelamento: {cancel_by_hotel['City Hotel']:.1f}% vs {cancel_by_hotel['Resort Hotel']:.1f}%")
print(f"5. üìä Lead Time √© a vari√°vel mais correlacionada com cancelamento: {correlation_matrix['is_canceled']['lead_time']:.3f}")

print("\n" + "=" * 60)
print("RECOMENDA√á√ïES PARA REDUZIR CANCELAMENTOS:")
print("=" * 60)
print("üéØ 1. Implementar pol√≠tica diferenciada para reservas com lead time > 100 dias")
print("üéØ 2. Criar campanhas especiais para grupos com alta taxa de cancelamento")
print("üéØ 3. Revisar estrat√©gia de pre√ßos para City Hotel")
print("üéØ 4. Melhorar comunica√ß√£o com h√≥spedes que fazem reservas com muita anteced√™ncia")
print("üéØ 5. Oferecer benef√≠cios para reservas n√£o cancel√°veis em per√≠odos de alta demanda")

print("\n" + "=" * 60)
print("PR√ìXIMOS PASSOS PARA MODELAGEM DE ML:")
print("=" * 60)
print("ü§ñ 1. Pr√©-processamento: Tratar valores faltantes em 'company', 'agent', 'country'")
print("ü§ñ 2. Feature Engineering: Criar vari√°veis como 'season', 'total_guests', 'total_nights'")
print("ü§ñ 3. Encoding: Converter vari√°veis categ√≥ricas usando One-Hot Encoding")
print("ü§ñ 4. Modelagem: Testar Random Forest, XGBoost e Logistic Regression")
print("ü§ñ 5. Otimiza√ß√£o: Usar GridSearch para tuning de hiperpar√¢metros")

print("üíæ SALVANDO RESULTADOS DA AN√ÅLISE")

# Salvar dataset com algumas transforma√ß√µes √∫teis
df.to_csv('hotel_bookings_analyzed.csv', index=False)

# Salvar estat√≠sticas importantes
summary_stats = {
    'total_reservas': df.shape[0],
    'taxa_cancelamento': df['is_canceled'].mean(),
    'lead_time_medio': df['lead_time'].mean(),
    'adr_medio': df['adr'].mean(),
    'hotel_counts': df['hotel'].value_counts().to_dict(),
    'top_countries': df['country'].value_counts().head(5).to_dict()
}

import json
with open('analysis_summary.json', 'w') as f:
    json.dump(summary_stats, f, indent=4)

print("‚úÖ An√°lise conclu√≠da e resultados salvos!")
print("üìÅ Arquivos gerados:")
print("   - hotel_bookings_analyzed.csv")
print("   - analysis_summary.json")
print("   - Gr√°ficos e visualiza√ß√µes")